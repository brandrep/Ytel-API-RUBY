# This file was automatically generated for ytel by APIMATIC v2.0
# ( https://apimatic.io ).

module Ytel
  # PostCardController
  class PostCardController < BaseController
    @instance = PostCardController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # Retrieve a postcard object by its PostcardId.
    # @param [String] postcardid Required parameter: The unique identifier for a
    # postcard object.
    # @param [String] response_type Required parameter: Response Type either
    # json or xml
    # @return String response from the API call
    def view_postcard(options = {})
      # Validate required parameters.
      validate_parameters(
        'postcardid' => options['postcardid'],
        'response_type' => options['response_type']
      )
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/Postcard/viewpostcard.{ResponseType}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'ResponseType' => options['response_type']
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'postcardid' => options['postcardid']
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Create, print, and mail a postcard to an address. The postcard front must
    # be supplied as a PDF, image, or an HTML string. The back can be a PDF,
    # image, HTML string, or it can be automatically generated by supplying a
    # custom message.
    # @param [String] to Required parameter: The AddressId or an object
    # structured when creating an address by addresses/Create.
    # @param [String] from Required parameter: The AddressId or an object
    # structured when creating an address by addresses/Create.
    # @param [String] attachbyid Required parameter: Set an existing postcard by
    # attaching its PostcardId.
    # @param [String] front Required parameter: A 4.25"x6.25" or 6.25"x11.25"
    # image to use as the front of the postcard.  This can be a URL, local file,
    # or an HTML string. Supported file types are PDF, PNG, and JPEG.
    # @param [String] back Required parameter: A 4.25"x6.25" or 6.25"x11.25"
    # image to use as the back of the postcard, supplied as a URL, local file,
    # or HTML string.  This allows you to customize your back design, but we
    # will still insert the recipient address for you.
    # @param [String] message Required parameter: The message for the back of
    # the postcard with a maximum of 350 characters.
    # @param [String] setting Required parameter: Code for the dimensions of the
    # media to be printed.
    # @param [String] response_type Required parameter: Response Type either
    # json or xml
    # @param [String] description Optional parameter: A description for the
    # postcard.
    # @param [String] htmldata Optional parameter: A string value that contains
    # HTML markup.
    # @return String response from the API call
    def create_postcard(options = {})
      # Validate required parameters.
      validate_parameters(
        'to' => options['to'],
        'from' => options['from'],
        'attachbyid' => options['attachbyid'],
        'front' => options['front'],
        'back' => options['back'],
        'message' => options['message'],
        'setting' => options['setting'],
        'response_type' => options['response_type']
      )
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/Postcard/createpostcard.{ResponseType}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'ResponseType' => options['response_type']
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'to' => options['to'],
        'from' => options['from'],
        'attachbyid' => options['attachbyid'],
        'front' => options['front'],
        'back' => options['back'],
        'message' => options['message'],
        'setting' => options['setting'],
        'description' => options['description'],
        'htmldata' => options['htmldata']
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Retrieve a list of postcard objects. The postcards objects are sorted by
    # creation date, with the most recently created postcards appearing first.
    # @param [String] response_type Required parameter: Response Type either
    # json or xml
    # @param [Integer] page Optional parameter: The page count to retrieve from
    # the total results in the collection. Page indexing starts at 1.
    # @param [Integer] pagesize Optional parameter: The count of objects to
    # return per page.
    # @param [String] postcardid Optional parameter: The unique identifier for a
    # postcard object.
    # @param [String] date_created Optional parameter: The date the postcard was
    # created.
    # @return String response from the API call
    def list_postcards(options = {})
      # Validate required parameters.
      validate_parameters(
        'response_type' => options['response_type']
      )
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/Postcard/listpostcard.{ResponseType}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'ResponseType' => options['response_type']
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'page' => options['page'],
        'pagesize' => options['pagesize'],
        'postcardid' => options['postcardid'],
        'dateCreated' => options['date_created']
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Remove a postcard object.
    # @param [String] postcardid Required parameter: The unique identifier of a
    # postcard object.
    # @param [String] response_type Required parameter: Response Type either
    # json or xml
    # @return String response from the API call
    def delete_postcard(options = {})
      # Validate required parameters.
      validate_parameters(
        'postcardid' => options['postcardid'],
        'response_type' => options['response_type']
      )
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/Postcard/deletepostcard.{ResponseType}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'ResponseType' => options['response_type']
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'postcardid' => options['postcardid']
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end
  end
end
